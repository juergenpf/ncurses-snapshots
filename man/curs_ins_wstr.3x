.\"***************************************************************************
.\" Copyright 2019-2022,2023 Thomas E. Dickey                                *
.\" Copyright 2002-2012,2017 Free Software Foundation, Inc.                  *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_ins_wstr.3x,v 1.23 2023/10/07 22:22:46 tom Exp $
.TH curs_ins_wstr 3X 2023-10-07 "ncurses 6.4" "Library calls"
.ie \n(.g \{\
.ds `` \(lq
.ds '' \(rq
.\}
.el \{\
.ie t .ds `` ``
.el   .ds `` ""
.ie t .ds '' ''
.el   .ds '' ""
.\}
.SH NAME
\fB\%ins_wstr\fP,
\fB\%ins_nwstr\fP,
\fB\%wins_wstr\fP,
\fB\%wins_nwstr\fP,
\fB\%mvins_wstr\fP,
\fB\%mvins_nwstr\fP,
\fB\%mvwins_wstr\fP,
\fB\%mvwins_nwstr\fP \-
insert a wide-character string in a \fIcurses\fR window
.SH SYNOPSIS
.nf
\fB#include <curses.h>
.PP
\fBint ins_wstr(const wchar_t *\fIwstr\fP);
\fBint ins_nwstr(const wchar_t *\fIwstr\fP, int \fIn\fP);
\fBint wins_wstr(WINDOW *\fIwin\fP, const wchar_t *\fIwstr\fP);
\fBint wins_nwstr(WINDOW *\fIwin\fP, const wchar_t *\fIwstr\fP, int \fIn\fP);
.PP
\fBint mvins_wstr(int \fIy\fP, int \fIx\fP, const wchar_t *\fIwstr\fP);
\fBint mvins_nwstr(int \fIy\fP, int \fIx\fP, const wchar_t *\fIwstr\fP, int \fIn\fP);
\fBint mvwins_wstr(WINDOW *\fIwin\fP, int \fIy\fP, int \fIx\fP, const wchar_t *\fIwstr\fP);
\fBint mvwins_nwstr(WINDOW *\fIwin\fP, int \fIy\fP, int \fIx\fP, const wchar_t *\fIwstr\fP, int \fIn\fP);
.fi
.SH DESCRIPTION
These routines insert a \fBwchar_t\fP character string
(as many characters as will fit on the line)
before the character under the cursor.
All characters to the right of the cursor are shifted right,
with the possibility of the rightmost characters on the line being lost.
No wrapping is performed.
The cursor position does not change
(after moving to \fIy\fP, \fIx\fP, if specified).
The four routines with \fIn\fP as the last argument
insert a leading substring of at most \fIn\fP \fBwchar_t\fP characters.
If \fIn\fP is less than 1, the entire string is inserted.
.PP
If a character in \fIwstr\fP is a tab, newline, carriage return or
backspace, the cursor is moved appropriately within the window.
A newline also does a \fBclrtoeol\fP before moving.
Tabs are considered to be at every eighth column.
If a character in \fIwstr\fP is another control character,
it is drawn in the \fB^\fIX\fR notation.
Calling \fBwin_wch\fP after adding a control character
(and moving to it, if necessary)
does not return the control character,
but instead returns a character in the ^-representation
of the control character.
.SH NOTES
Note that all but wins_nwstr may be macros.
.PP
If the first character in the string is a nonspacing character, these
functions will fail.
XSI does not define what will happen if a nonspacing character follows
a control character.
.SH RETURN VALUE
Upon successful completion, these functions return \fBOK\fP.
Otherwise, they return \fBERR\fP.
.PP
Functions with a \*(``mv\*('' prefix first perform a cursor movement using
\fBwmove\fP, and return an error if the position is outside the window,
or if the window pointer is null.
.SH SEE ALSO
\fB\%curses\fP(3X),
\fB\%curs_insstr\fP(3X),
\fB\%curs_in_wch\fP(3X),
\fB\%curs_ins_wch\fP(3X)
